name: Helm Chart Semver

on:
  workflow_call:
    inputs:
      chartPath:
        description: 'Path to the Helm chart directory'
        required: false
        type: string
        default: '.'
      chartFile:
        description: 'Path to the Chart.yaml file relative to chartPath'
        required: false
        type: string
        default: Chart.yaml
      branch:
        description: 'Branch to push changes to'
        required: false
        type: string
        default: main
    secrets:
      git-token:
        description: 'GitHub token with push permissions'

jobs:
  version-chart:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch latest tag
        id: get_version
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E 'v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Fetched latest tag: $LATEST_TAG"

      - name: Determine next version
        id: next_version
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          MAJOR=$(echo "${LATEST_TAG}" | cut -d'.' -f1 | sed 's/v//')
          MINOR=$(echo "${LATEST_TAG}" | cut -d'.' -f2)
          PATCH=$(echo "${LATEST_TAG}" | cut -d'.' -f3)
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMIT_MESSAGES=$(git log HEAD --format=%B)
          else
            COMMIT_MESSAGES=$(git log ${LATEST_TAG}..HEAD --format=%B)
          fi
          if echo "$COMMIT_MESSAGES" | grep -q "!major"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MESSAGES" | grep -q "!minor"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Helm Chart Version
        run: |
          CHART_FILE="${{ inputs.chartPath }}/${{ inputs.chartFile }}"
          echo "Updating chart version in ${CHART_FILE} to ${{ steps.next_version.outputs.new_version }}"
          yq eval ".version = \"${{ steps.next_version.outputs.new_version }}\"" -i "$CHART_FILE"

      - name: Commit and push version update
        env:
          GITHUB_TOKEN: ${{ secrets.git-token }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add "${{ inputs.chartPath }}/${{ inputs.chartFile }}"
          git commit -m "Bump Helm chart to ${{ steps.next_version.outputs.new_version }}" || echo "No changes to commit"
          git push origin ${{ inputs.branch }}

      - name: Package Helm Chart
        run: |
          helm package ${{ inputs.chartPath }} --version ${{ steps.next_version.outputs.new_version }}

      - name: Generate Changelog
        id: generate_changelog
        run: |
          LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.next_version.outputs.new_version }}"
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            NEW_LOG=$(git log HEAD --pretty=format:"* %s (%h)" | grep -v "Update CHANGELOG")
          else
            NEW_LOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"* %s (%h)" | grep -v "Update CHANGELOG")
          fi
          { echo "## ${NEW_VERSION} - $(date +'%Y-%m-%d')"; echo ""; echo "$NEW_LOG"; echo ""; } > new_changelog.md
          if [ -f CHANGELOG.md ]; then cat CHANGELOG.md >> new_changelog.md; fi
          mv new_changelog.md CHANGELOG.md
          cat CHANGELOG.md

      - name: Commit Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.git-token }}
        run: |
          git add CHANGELOG.md
          git commit -m "Update CHANGELOG for ${{ steps.next_version.outputs.new_version }}" || echo "No changes to commit"
          git push origin ${{ inputs.branch }}

      - name: Update Tag to Latest Commit
        env:
          GITHUB_TOKEN: ${{ secrets.git-token }}
        run: |
          git tag -f ${{ steps.next_version.outputs.new_version }}
          git push origin ${{ inputs.branch }} --tags --force

      - name: Get Latest Commit Hash
        id: latest_commit
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "latest_commit=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "Latest commit hash: $COMMIT_HASH"

      - name: Create GitHub Release via GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.git-token }}
        run: |
          gh release create ${{ steps.next_version.outputs.new_version }} \
            --title "${{ steps.next_version.outputs.new_version }}" \
            --notes "$(cat CHANGELOG.md)" \
            --target "${{ steps.latest_commit.outputs.latest_commit }}"